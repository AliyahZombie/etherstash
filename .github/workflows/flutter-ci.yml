name: Flutter CI

on:
  push:
    branches:
      - '**'

permissions:
  contents: write  # needed to create releases

env:
  FLUTTER_CHANNEL: stable

jobs:
  get_version:
    name: Read version from pubspec.yaml
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.read.outputs.VERSION }}
      VERSION_NAME: ${{ steps.read.outputs.VERSION_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read version
        id: read
        shell: bash
        run: |
          VERSION_LINE=$(grep -E '^version:' pubspec.yaml | head -n1 | sed 's/^[[:space:]]*version:[[:space:]]*//')
          if [ -z "$VERSION_LINE" ]; then
            echo "Could not find version in pubspec.yaml" >&2
            exit 1
          fi
          # VERSION like 1.2.3+456; VERSION_NAME is part before '+'
          VERSION_NAME=${VERSION_LINE%%+*}
          echo "VERSION=$VERSION_LINE" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT

  android_debug:
    name: Android Debug APK
    runs-on: ubuntu-latest
    needs: get_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter (${{ env.FLUTTER_CHANNEL }})
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Flutter pub get
        run: flutter pub get

      - name: Build Android debug APK
        run: flutter build apk --debug --build-name ${{ needs.get_version.outputs.VERSION_NAME }}

      - name: Upload Android debug artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: build/app/outputs/flutter-apk/app-debug.apk

  windows_debug:
    name: Windows Debug EXE
    runs-on: windows-latest
    needs: get_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter (${{ env.FLUTTER_CHANNEL }})
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Flutter pub get
        run: flutter pub get

      - name: Build Windows debug
        run: flutter build windows --debug --build-name ${{ needs.get_version.outputs.VERSION_NAME }}

      - name: Package Windows debug folder
        shell: pwsh
        run: |
          $zipPath = "windows-debug.zip"
          Compress-Archive -Path "build/windows/runner/Debug/*" -DestinationPath $zipPath -Force

      - name: Upload Windows debug artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-debug-zip
          path: windows-debug.zip

  release:
    name: Create GitHub Release (and build MSIX)
    if: startsWith(github.event.head_commit.message, 'release')
    runs-on: windows-latest
    needs: [get_version, android_debug, windows_debug]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter (${{ env.FLUTTER_CHANNEL }})
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Flutter pub get
        run: flutter pub get

      - name: Prepare signing certificate
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path certs | Out-Null
          if (-not [string]::IsNullOrWhiteSpace("${{ secrets.MSIX_PFX_BASE64 }}")) {
            [IO.File]::WriteAllBytes("certs/codesign.pfx", [Convert]::FromBase64String("${{ secrets.MSIX_PFX_BASE64 }}"))
          } else {
            Write-Error "MSIX_PFX_BASE64 secret is missing. Please add it to repository secrets."
          }
        env:
          MSIX_PFX_PASSWORD: ${{ secrets.MSIX_PFX_PASSWORD }}

      - name: Build Windows MSIX (signed)
        shell: pwsh
        env:
          MSIX_PFX_PASSWORD: ${{ secrets.MSIX_PFX_PASSWORD }}
        run: |
          # Ensure dependencies are ready
          dart pub get
          # Create signed MSIX using msix_config.yaml and injected certificate
          dart run msix:create

      - name: Find MSIX artifact
        id: findmsix
        shell: pwsh
        run: |
          $msix = Get-ChildItem -Path . -Recurse -Filter *.msix | Select-Object -First 1
          if ($null -ne $msix) {
            "path=$($msix.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Download Android debug artifact
        uses: actions/download-artifact@v4
        with:
          name: android-debug-apk
          path: ./release-assets

      - name: Download Windows debug artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-debug-zip
          path: ./release-assets

      - name: Move MSIX into assets (if exists)
        if: steps.findmsix.outputs.path != ''
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path ./release-assets | Out-Null
          Copy-Item -Path "${{ steps.findmsix.outputs.path }}" -Destination ./release-assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get_version.outputs.VERSION_NAME }}
          name: v${{ needs.get_version.outputs.VERSION_NAME }}
          body: ''
          files: |
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

