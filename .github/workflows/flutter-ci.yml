name: Flutter CI

on:
  push:
    branches:
      - '**'

permissions:
  contents: write  # needed to create releases

env:
  FLUTTER_CHANNEL: stable

jobs:
  get_version:
    name: Read version from pubspec.yaml
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.read.outputs.VERSION }}
      VERSION_NAME: ${{ steps.read.outputs.VERSION_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read version
        id: read
        shell: bash
        run: |
          VERSION_LINE=$(grep -E '^version:' pubspec.yaml | head -n1 | sed 's/^[[:space:]]*version:[[:space:]]*//')
          if [ -z "$VERSION_LINE" ]; then
            echo "Could not find version in pubspec.yaml" >&2
            exit 1
          fi
          # VERSION like 1.2.3+456; VERSION_NAME is part before '+'
          VERSION_NAME=${VERSION_LINE%%+*}
          echo "VERSION=$VERSION_LINE" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT

  android_debug:
    name: Android Debug APK
    if: ${{ !startsWith(github.event.head_commit.message, 'release') }}
    runs-on: ubuntu-latest
    needs: get_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter (${{ env.FLUTTER_CHANNEL }})
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Flutter pub get
        run: flutter pub get

      - name: Build Android debug APK
        run: flutter build apk --debug --build-name ${{ needs.get_version.outputs.VERSION_NAME }}

      - name: Upload Android debug artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: build/app/outputs/flutter-apk/app-debug.apk

  windows_debug:
    name: Windows Debug EXE
    if: ${{ !startsWith(github.event.head_commit.message, 'release') }}
    runs-on: windows-latest
    needs: get_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter (${{ env.FLUTTER_CHANNEL }})
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Flutter pub get
        run: flutter pub get

      - name: Build Windows debug
        run: flutter build windows --debug --build-name ${{ needs.get_version.outputs.VERSION_NAME }}

      - name: Package Windows debug folder
        shell: pwsh
        run: |
          $zipPath = "windows-debug.zip"
          $preferred = Join-Path -Path "build/windows/x64/runner/Debug" -ChildPath "*"
          if (Test-Path (Split-Path $preferred)) {
            Compress-Archive -Path $preferred -DestinationPath $zipPath -Force
          } else {
            $exe = Get-ChildItem -Path "build/windows" -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
              Where-Object { $_.FullName -match "\\(Debug|debug)\\" } |
              Select-Object -First 1
            if (-not $exe) {
              Write-Host "Could not find Debug .exe under build/windows. Listing build dir for diagnostics:"
              Get-ChildItem -Path build/windows -Recurse -ErrorAction SilentlyContinue | Select-Object FullName | Out-Host
              throw "Windows Debug executable not found."
            }
            $folder = Split-Path $exe.FullName -Parent
            Compress-Archive -Path (Join-Path $folder '*') -DestinationPath $zipPath -Force
          }

      - name: Upload Windows debug artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-debug-zip
          path: windows-debug.zip

  android_release:
    name: Android Release (debug-signed AAB/APK)
    if: startsWith(github.event.head_commit.message, 'release')
    runs-on: ubuntu-latest
    needs: get_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter (${{ env.FLUTTER_CHANNEL }})
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Flutter pub get
        run: flutter pub get

      - name: Build Android App Bundle (release with debug signing)
        run: flutter build appbundle --release --build-name ${{ needs.get_version.outputs.VERSION_NAME }}

      - name: Build Android APK (release with debug signing)
        run: flutter build apk --release --build-name ${{ needs.get_version.outputs.VERSION_NAME }}

      - name: Upload Android release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: |
            build/app/outputs/bundle/release/app-release.aab
            build/app/outputs/flutter-apk/app-release.apk

  windows_release:
    name: Windows Release (zip exe folder)
    if: startsWith(github.event.head_commit.message, 'release')
    runs-on: windows-latest
    needs: get_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter (${{ env.FLUTTER_CHANNEL }})
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Flutter pub get
        run: flutter pub get

      - name: Build Windows release
        run: flutter build windows --release --build-name ${{ needs.get_version.outputs.VERSION_NAME }}

      - name: Package Windows release folder
        shell: pwsh
        run: |
          $zipPath = "windows-release.zip"
          $preferred = Join-Path -Path "build/windows/x64/runner/Release" -ChildPath "*"
          if (Test-Path (Split-Path $preferred)) {
            Compress-Archive -Path $preferred -DestinationPath $zipPath -Force
          } else {
            $exe = Get-ChildItem -Path "build/windows" -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
              Where-Object { $_.FullName -match "\\(Release|release)\\" } |
              Select-Object -First 1
            if (-not $exe) {
              Write-Host "Could not find Release .exe under build/windows. Listing build dir for diagnostics:"
              Get-ChildItem -Path build/windows -Recurse -ErrorAction SilentlyContinue | Select-Object FullName | Out-Host
              throw "Windows Release executable not found."
            }
            $folder = Split-Path $exe.FullName -Parent
            Compress-Archive -Path (Join-Path $folder '*') -DestinationPath $zipPath -Force
          }

      - name: Upload Windows release artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-zip
          path: windows-release.zip

  release:
    name: Create GitHub Release
    if: startsWith(github.event.head_commit.message, 'release')
    runs-on: ubuntu-latest
    needs: [get_version, android_release, windows_release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Windows release artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-release-zip
          path: ./release-assets

      - name: Download Android release artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-release
          path: ./release-assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get_version.outputs.VERSION_NAME }}
          name: v${{ needs.get_version.outputs.VERSION_NAME }}
          body: ''
          files: |
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

